<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[olivia ifrim - personal website and technology blog]]></title><description><![CDATA[<p>
    
    Hi, I'm Olivia! I'm currently a Senior Software Engineer at
  <a href="https://daisie.com">
      Daisie
  </a>
    where I am designing and building the next generation of backend services for
    our upcoming launch. Before this
    I was helping ship
  <a href="https://www.primevideo.com/">
    Amazon Video
  </a>
 to a bunch of TVs and set-top boxes, and even
    before that I was building services for
  <a href="https://docs.microsoft.com/en-us/graph/overview">
    Office 365 at Microsoft
  </a>
  . And even befooooore
    that I was building games for kids at 
  <a href="https://www.metacritic.com/game/xbox-360/kinect-sesame-street-tv">
    Xbox.
  </a>
  </p>
  <p>
    I love technology and I love creating software that lasts. I occasionaly speak at events
    and run workshops.
  </p>]]></description><link>http://iolivia.me</link><generator>RSS for Node</generator><lastBuildDate>Tue, 12 Mar 2019 22:37:51 GMT</lastBuildDate><item><title><![CDATA[Making a basic game UI with imgui and ggez]]></title><description><![CDATA[In this post I'll walk you through how you can create game user interface with imgui and ggez. I spent a lot of time trying to make this…]]></description><link>http://iolivia.me/posts/imgui-ggez/</link><guid isPermaLink="false">http://iolivia.me/posts/imgui-ggez/</guid><pubDate>Mon, 11 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this post I&apos;ll walk you through how you can create game user interface with imgui and ggez. I spent a lot of time trying to make this work for my game (which you can read more about &lt;a href=&quot;/posts/24-hours-of-rust-game-dev/&quot;&gt;here&lt;/a&gt;) and suffered greatly because of the lack of documentation, so I&apos;m writing this so you don&apos;t have to! &lt;/p&gt;
&lt;h2&gt;Packages&lt;/h2&gt;
&lt;p&gt;Let&apos;s start with our tech stack, we&apos;ll be needing the following packages.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;# Cargo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toml

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;dependencies&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
ggez &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.4.4&quot;&lt;/span&gt;

gfx_core &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.8.3&quot;&lt;/span&gt;
gfx_device_gl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.15.3&quot;&lt;/span&gt;

imgui &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.22&quot;&lt;/span&gt;
imgui&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;gfx&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;renderer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.22&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Starting with ggez&lt;/h2&gt;
&lt;p&gt;We are going to start with the ggez &lt;a href=&quot;https://github.com/ggez/ggez/blob/0.4/examples/super_simple.rs&quot;&gt;super simple example&lt;/a&gt; which just draws a circle which is moving from left to write and then we&apos;ll add all the imgui bits.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// main.rs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;crate&lt;/span&gt; ggez&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; ggez&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;conf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; ggez&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;event&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; ggez&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DrawMode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Point2&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; ggez&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; GameResult&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    pos_x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MainState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pos_x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;EventHandler &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos_x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos_x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;800.0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            DrawMode&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Fill&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            Point2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos_x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;380.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token number&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; conf&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Conf&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ctx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load_from_conf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;super_simple&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ggez&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; MainState&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    event&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Adding imgui&lt;/h2&gt;
&lt;p&gt;We are going to wrap all imgui functionality in a separate class which we will then use in our main. So for now, let&apos;s define the public interface of our imgui wrapper. &lt;/p&gt;
&lt;p&gt;There are a few pieces of functionality we&apos;ll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initializing imgui&lt;/li&gt;
&lt;li&gt;rendering game ui&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;receiving mouse events&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mouse position&lt;/li&gt;
&lt;li&gt;mouse button up/down&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should look something like this. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This ImGuiWrapper will be the class that encapsulates all &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// imgui functionality.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; ImGuiWrapper &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// This is going to take a ggez context and give us &lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// back a fresh instance of the wrapper.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// This is what we will call on every render iteration&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// to render the imgui bits on top of our game.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// This is how we&apos;ll update the mouse position. The UI needs &lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// to be aware of the position so it can display a different color&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// when you hover over a button etc.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update_mouse_pos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// This is how we&apos;ll tell imgui a mouse button has been pressed &lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// or released. The 3 bools here are counterintuitively actually&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 1. has the left mouse button been pressed&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 2. has the right mouse button been pressed&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 3. has the middle mouse button been pressed&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update_mouse_down&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; pressed&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bool&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// We could also handle mouse wheels for scrolling or&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// key events in a similar fashion, I&apos;m hoping you get&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// the gist.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation of this wrapper is essentially a bunch of boilerplate code to connect the ggez context with imgui. There are a few key parts around getting raw context bits, like the render target and factory, but apart from that it should be code you write (or copy) once and then pretty much forget about. You can see the full implementation &lt;a href=&quot;https://github.com/iolivia/imgui-ggez-starter/blob/master/src/imgui_wrapper.rs&quot;&gt;here&lt;/a&gt; if you&apos;d like to go a bit deeper into the details.&lt;/p&gt;
&lt;p&gt;Something that is worth looking at closer is the render function, since that actually decides what goes on screen.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Update mouse, this will take the mouse state stored&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// in the wrapper and make sure imgui is aware of it.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update_mouse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Create new frame using the ggez context window size&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; w &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;conf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;window_mode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;conf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;window_mode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; frame_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; FrameSize &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    logical_size&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;w &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; h &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f64&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    hidpi_factor&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; now &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Instant&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; delta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; now &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;last_frame&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; delta_s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; delta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;as_secs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f32 &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; delta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subsec_nanos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; f32 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1_000_000_000.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;last_frame &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; now&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Create the frame&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ui &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;frame_size&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; delta_s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Various ui things&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// This is where all our windows/menus/popups will go.&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// For now we just have the sample window.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Window&lt;/span&gt;
    ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;im_str!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;600.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ImGuiCond&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;FirstUseEver&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ImGuiCond&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;FirstUseEver&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token closure-params&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;im_str!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;im_str!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;こんにちは世界！&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;im_str!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;This...is...imgui-rs!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mouse_pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;imgui&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mouse_pos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;im_str!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token string&quot;&gt;&quot;Mouse Position: ({:.1},{:.1})&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          mouse_pos&lt;span class=&quot;token number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          mouse_pos&lt;span class=&quot;token number&quot;&gt;.1&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; ui&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;small_button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;im_str!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;small button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token function&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Small button clicked&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Render&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;factory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoder&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_gfx_objects&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;renderer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ui&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;factory&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; encoder&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Integrating imgui in our main&lt;/h2&gt;
&lt;p&gt;Now that we have a clear interface for how we&apos;ll handle imgui, we can extend our main to include this. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// excluding imports here.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// This is our main state, same as before, except&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// now we have an instance of imgui_wrapper.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  pos_x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  imgui_wrapper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ImGuiWrapper&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MainState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Note how we are initializing imgui_wrapper here,&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// we just give it a context and it gives us back&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// an instance which we pass to main state.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; imgui_wrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ImGuiWrapper&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      pos_x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      imgui_wrapper&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;EventHandler &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos_x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos_x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;800.0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Render game stuff (same as before)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        DrawMode&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Fill&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        Point2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pos_x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;380.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token number&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Render game ui&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgui_wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// We subscribe to ggez&apos;s mouse motion event to&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// get the position of the mouse and we pretty much&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// just give that to imgui.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mouse_motion_event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _state&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; MouseState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _xrel&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _yrel&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgui_wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update_mouse_pos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Same for button down events.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mouse_button_down_event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; button&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; MouseButton&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32 &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgui_wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update_mouse_down&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      button &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; MouseButton&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Left&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      button &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; MouseButton&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Right&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      button &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; MouseButton&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Middle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Same for button up events.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mouse_button_up_event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; button&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; MouseButton&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; i32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;imgui_wrapper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update_mouse_down&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            MouseButton&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Left &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            MouseButton&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Right &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            MouseButton&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Middle &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Same as before&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Now that we have imgui integrated into our main, we should see the window we just added drawn on top of our ggez simple circle. &lt;/p&gt;
&lt;p&gt;If we want to get fancy we can add more imgui stuff like popups, a menu bar and some menu items. See it in action below!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/demo-1f07d4aea5415c5fd887c4899142ff5d.gif&quot; alt=&quot;alt text&quot; title=&quot;Demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;PS: You can find all this code at &lt;a href=&quot;https://github.com/iolivia/imgui-ggez-starter&quot;&gt;imgui-ggez-starter&lt;/a&gt; repo, which should be a pretty good reference point if you want to add imgui to your ggez project. Let me know if you have any problems or you&apos;d like to contribute! &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Entity component system (ECS) explained with tennis players and courts]]></title><description><![CDATA[In the last post  I talked about a small game I built in Rust and roughly how far I got in 24 hours. One of the biggest challenges I had was…]]></description><link>http://iolivia.me/posts/entity-component-system-explained/</link><guid isPermaLink="false">http://iolivia.me/posts/entity-component-system-explained/</guid><pubDate>Sun, 03 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/posts/24-hours-of-rust-game-dev/&quot;&gt;In the last post&lt;/a&gt; I talked about a small game I built in Rust and roughly how far I got in 24 hours. One of the biggest challenges I had was finding the right architecture. &lt;/p&gt;
&lt;p&gt;I started off with a basic inheritance model until I realized that was &lt;em&gt;The Wrong Thing &lt;sup&gt;TM&lt;/sup&gt;&lt;/em&gt; and switched to an &lt;strong&gt;Entity component system architecture&lt;/strong&gt; (or ECS). I didn&apos;t find ECS immediately intuitive and I struggled a bit to think in ECS, so I figured I&apos;d write a short post about it in case it helps anyone else facing the same challenges. &lt;/p&gt;
&lt;p&gt;I&apos;ll be using ggez and specs, but to be honest it doesn&apos;t matter too much, the same principles will apply to any ECS implementation although the details might be slightly different.&lt;/p&gt;
&lt;h2&gt;ECS overview&lt;/h2&gt;
&lt;p&gt;In ECS terminology you have these 3 basic concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Entities&lt;/strong&gt;: this is just a type of a thing referenced with an identifier (like a Player, Ball, etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: these are what your entities are made up of. For example, you can have a Renderable component, a Position component, etc. This is purely data storage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Systems&lt;/strong&gt;: systems use entities and components and contain behaviour and logic based on that data. For example, you could have a rendering system which just iterates through all entities which contain renderable components and draws all of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The whole idea is separating behaviour from logic, so all the data goes in components and all the behaviour goes into systems.&lt;/p&gt;
&lt;p&gt;If it doesn&apos;t make sense yet, hang in there because a real example is coming.&lt;/p&gt;
&lt;h2&gt;ECS in practice&lt;/h2&gt;
&lt;p&gt;So let&apos;s talk a specific example. I&apos;m building a simple tennis simulation/management game, think like a mix of Cities Skylines with a bit of Prison architect, but about tennis. The idea is pretty simple: you have players and you have tennis courts, and you want to assign people to courts and have them go there and play. See it in action below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/people_to_courts-7b0c8ec951007ad4d5895716c3ca7618.gif&quot; alt=&quot;alt text&quot; title=&quot;People going to courts&quot;&gt;&lt;/p&gt;
&lt;p&gt;So we&apos;ll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;floors&lt;/li&gt;
&lt;li&gt;people&lt;/li&gt;
&lt;li&gt;tennis courts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then we will also need the following behaviours:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a person needs to find an available tennis court&lt;/li&gt;
&lt;li&gt;a person with an assigned tennis court needs to travel to that court&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here is how that works in ECS terms. Let&apos;s start with components.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;p&gt;So components are basically the simplest smallest piece of data that makes sense on its own (think an atom). So let&apos;s try to break this down. &lt;/p&gt;
&lt;p&gt;We need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a way to assign an image or a list of images to an entity: for example, the court is made up of 8 images and the person is made up of 1 image&lt;/li&gt;
&lt;li&gt;a way to keep track of where each entity is on the grid&lt;/li&gt;
&lt;li&gt;a way to link a person to a court&lt;/li&gt;
&lt;li&gt;a way to link a court to a person&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Position&lt;/h4&gt;
&lt;p&gt;Let&apos;s start with the easy one. Everything needs to have a position. Normally that would just be an x and y in a 2D game, but since we want to make sure things are layered properly (like no courts on top of people), we need to include a z as well. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Component, Clone)]&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[storage(VecStorage)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Position &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; z&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Position &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; z&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Position &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; z &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;to_point&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Point2 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Point2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Images&lt;/h4&gt;
&lt;p&gt;For handling images, I decided to break this down into two components (although I&apos;m not entirely convinced now that that was a good idea now), but here is how I thought about it. &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Image&lt;/code&gt; will handle the cases when you only need one image (like the floor and the person) and &lt;code class=&quot;language-text&quot;&gt;Sprite&lt;/code&gt; will handle the more complex case of a list of images with rotations (like the tennis courts).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// image.rs&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Image doesn&apos;t do all that much, just keeps&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// a path to an image.&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Component)]&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[storage(VecStorage)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Image &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Image &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ggez&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Image &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// sprite.rs&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Sprite is a little more complex but &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// the idea is simple: multiple images, &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// each with an offset and a rotation. &lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Clone)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; SpriteConfig &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; image_index&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; usize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; tile_offset_x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u8&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; tile_offset_y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u8&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; rotation&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; SpriteConfig &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;image_index&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; usize&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tile_offset_x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u8&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tile_offset_y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u8&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rotation&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    SpriteConfig &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      image_index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      tile_offset_x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      tile_offset_y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      rotation&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Component)]&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[storage(VecStorage)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Sprite &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; images&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Image&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SpriteConfig&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Sprite &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;ggez&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; paths&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;str&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Vec&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;SpriteConfig&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; images &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Vec&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Image&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; path &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; paths &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
        graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Could not load image at {}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      images&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    Sprite &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; images&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;People and courts&lt;/h4&gt;
&lt;p&gt;Now, for people and courts, we just need to keep track of courts on people and people on courts. This made me think of database relations for some reason, since it seems like we are storing a M:M relationship, but we need to do that since in some cases we&apos;ll only have access to the person entity not the court and we want the person to know about its assigned court. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// person.rs&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// I decided to call this a person even though it&apos;s &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// basically a tennis player. It doesn&apos;t hold much, just a&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// reference to the court entity and the court&apos;s position&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Component)]&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[storage(VecStorage)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Person &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; assigned_court&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Entity&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; assigned_court_position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Option&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Position&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Person &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Person &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      assigned_court&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; None&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      assigned_court_position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; None&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might be wondering why we&apos;re also recording the court&apos;s position. That is because we want the person to move over to the court and to know where to move it needs to know the court&apos;s position. This can be problematic if the court&apos;s position can change, since we&apos;re keeping a copy at a point in time, but for now it will do. &lt;/p&gt;
&lt;p&gt;Next, courts!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// tennis_court.rs&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Tennis courts just keep track of which &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// people are assigned to it, easy!&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Component)]&lt;/span&gt;
&lt;span class=&quot;token attribute attr-name&quot;&gt;#[storage(VecStorage)]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; TennisCourt &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; assigned_people&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; TennisCourt &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;assigned_people&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; u32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Self &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    TennisCourt &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; assigned_people &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So here is our final list of components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Position&lt;/li&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Sprite&lt;/li&gt;
&lt;li&gt;Person&lt;/li&gt;
&lt;li&gt;TennisCourt&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Entities&lt;/h3&gt;
&lt;p&gt;Now entities are just a composition of components. &lt;/p&gt;
&lt;p&gt;So we&apos;ll have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;floor&lt;/strong&gt; which has Position and Image&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;person&lt;/strong&gt; which has Position, Image and Person&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tennis court&lt;/strong&gt; which has Position, Sprite and TennisCourt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I created a util file whose sole responsibility is to create these entities. Eventually I can replace this file with a json config to make it easier to change. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// world_factory.rs&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; WorldFactory &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Creating floors&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new_floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; world&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; World&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    world
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create_entity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/images/floor_1.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Creating people&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new_person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; world&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; World&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; WorldFactory&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_random_path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;person&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    world
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create_entity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Person&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Image&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;as_str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// Creating courts&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new_tennis_court&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; world&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; World&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; f32&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Entity &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// This is just positions and rotations which &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// help us build the tennis court out of only &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// two images, don&apos;t worry about it too much!&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; sprite_config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6.28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6.28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      SpriteConfig&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    world
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create_entity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TennisCourt&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Sprite&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/images/tennis_court_1.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/images/tennis_court_2.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_vec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        sprite_config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;to_vec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&apos;s really not all that much to this code, it just combines the components that make sense for each entity.&lt;/p&gt;
&lt;h3&gt;Systems&lt;/h3&gt;
&lt;p&gt;So far we talked about the data only, so let&apos;s start thinking how we&apos;ll address behaviours. &lt;/p&gt;
&lt;p&gt;We have 3 main behaviours:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rendering &lt;/li&gt;
&lt;li&gt;court assignment&lt;/li&gt;
&lt;li&gt;path finding&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Rendering&lt;/h4&gt;
&lt;p&gt;We can render two types of things basically, either images or sprites. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is our rendering system.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; System&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; RenderingSystem&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// This is the type of data we will use in this system.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// It&apos;s a good idea to have every system only use the data &lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// it needs. &lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; SystemData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        Entities&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        ReadStorage&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a,&lt;/span&gt; Position&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        ReadStorage&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a,&lt;/span&gt; Image&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        ReadStorage&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a,&lt;/span&gt; Sprite&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// This is the run method which gets called on every game&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// loop iteration.&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;SystemData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// This is all the data this system uses.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position_storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image_storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sprite_storage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Grab all entities with a position and an image component&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entities_with_image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;position_storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;image_storage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Draw each&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; entities_with_image &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;draw_image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; image&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Grab all entities with a position and a sprite component&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entities_with_sprite &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;position_storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;sprite_storage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Draw each&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;entity&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sprite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; entities_with_sprite &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;draw_sprite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sprite&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&apos;s discuss the rendering system in more detail. &lt;/p&gt;
&lt;p&gt;The system has access to a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the full list of entities&lt;/li&gt;
&lt;li&gt;the list of position components&lt;/li&gt;
&lt;li&gt;the list of image components&lt;/li&gt;
&lt;li&gt;the list of sprite components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specs gives a useful &lt;code class=&quot;language-text&quot;&gt;join&lt;/code&gt; method which we can use to get entities with a certain combination of components. For example, this will give us only enitities that have a position component AND an image component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Grab all entities with a position and an image component&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entities_with_image &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;position_storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;image_storage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, we can get all entities which have position and sprite.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Grab all entities with a position and a sprite component&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; entities_with_sprite &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;entities&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;position_storage&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;sprite_storage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have these lists all we have to do is iterate through them and simply render each image and each sprite. This is a very basic rendering system that works. In the future this might need to be more complex like: sort entities by depth first, group images and sprite so we can render them more efficiently, etc. &lt;/p&gt;
&lt;p&gt;The key bit here is also that we are not rendering based on entity type, but we are rendering based on components of entities. For example, this code doesn&apos;t care that we have floors or courts, it just cares about &quot;entities with images&quot; or &quot;entities with sprites&quot;. In a more traditional game architecture we might care about what the entity is, but the beauty of ECS is that you break everything down into the simplest thing and you gave systems working with the minimum amount of information they need. Imagine we add thousands of new entities, this system doesn&apos;t need to change one bit. If that is not elegant, I don&apos;t know what is! &lt;/p&gt;
&lt;h4&gt;Court assignment&lt;/h4&gt;
&lt;p&gt;The other system we care about is how people get assigned to courts. Again for this system we only need to care about: people, courts and positions.&lt;/p&gt;
&lt;p&gt;We find all available courts, we find all people that don&apos;t have courts and we match them up. I won&apos;t include the code because it needs a bit of tidying up but hopefully you get the gist. &lt;/p&gt;
&lt;h4&gt;Path finding&lt;/h4&gt;
&lt;p&gt;Once we&apos;ve assigned a court and a court position to each player, we need to make them move there. This is a greedy style path finding, we just try to get closer at very step in the direction of our desired position. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; System&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; PersonMovementSystem &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; SystemData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      ReadStorage&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a,&lt;/span&gt; Person&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
      WriteStorage&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&apos;a,&lt;/span&gt; Position&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Self&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;SystemData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;people&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; positions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;people&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; positions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;assigned_court&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;assigned_court_position&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;court_position&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token comment&quot;&gt;// Calculate some stuff&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x_distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;court_position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; TILE_WIDTH&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; y_distance &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;court_position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; TILE_WIDTH&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; x_direction &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; y_direction &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; x_distance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        x_direction &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; y_distance &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        y_direction &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;token comment&quot;&gt;// Check if we are there&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; x_distance &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; y_distance &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;token keyword&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;token comment&quot;&gt;// If we&apos;re not there yet, go with the highest distance first&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; x_distance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; y_distance&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; TILE_WIDTH &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; x_direction&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                        position&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; TILE_WIDTH &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; y_direction&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;And there you have it: components, entities and systems explained with a real world example. Hopefully this demystifies ECS a little and helps you understand how you would use it yourself. &lt;/p&gt;
&lt;p&gt;Got some questions? Want me to write more? Let me know!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[24 hours of game development in Rust]]></title><description><![CDATA[In this post I'll talk about a small game I've been developing in about 24 hours in total (mostly in a few hour blocks during evenings or…]]></description><link>http://iolivia.me/posts/24-hours-of-rust-game-dev/</link><guid isPermaLink="false">http://iolivia.me/posts/24-hours-of-rust-game-dev/</guid><pubDate>Fri, 01 Mar 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this post I&apos;ll talk about a small game I&apos;ve been developing in about 24 hours in total (mostly in a few hour blocks during evenings or weekends). The game is far from finished, but I thought I&apos;d write up about my experience so far, what I&apos;ve learnt and some interesting observations about building a game from scratch-ish and doing it in Rust. &lt;/p&gt;
&lt;h2&gt;Why Rust?&lt;/h2&gt;
&lt;p&gt;I picked Rust because I&apos;ve been hearing great things about it and I see it&apos;s been getting some traction in the game development space. I have to say at the point which I started this game I had written a few small programs in Rust, just enough to not feel like my hands were tied when I started writing the game. &lt;/p&gt;
&lt;h2&gt;Why a game and what game?&lt;/h2&gt;
&lt;p&gt;Making games is fun! I wish there was a more elaborate reason than that, but for side projects I normally prefer things that are quite far from what I do daily at my job. Now, what game? I wanted to make a simulation game with a tennis theme, think like Cities Skylines meets Zoo Tycoon meets Prison Architect with tennis and pixel art. I haven&apos;t got it all figured out yet, but it&apos;s basically a tennis academy where people come and play tennis.&lt;/p&gt;
&lt;h2&gt;Tech research&lt;/h2&gt;
&lt;p&gt;I knew I wanted to use Rust, but I didn&apos;t know exactly how much &quot;from-scratch&quot; I wanted to make it. I didn&apos;t want to write pixel shaders, but I didn&apos;t want to use drag and drop either, so I had to pick something that gave me enough flexibility but also keep it interesting from an engineering perspective without going too low level. &lt;/p&gt;
&lt;p&gt;I found a few useful resources which I&apos;ll link here in case you want to have a look: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://arewegameyet.com/&quot;&gt;Are we game yet&lt;/a&gt; - a list of game dev related Rust packages&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/rust_gamedev&quot;&gt;Rust game dev subreddit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kenney.nl&quot;&gt;Free pixel art&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did a little research on Rust game engines and was left with two main contenders: Piston and ggez. I tried both in a previous small project and I ended up going with ggez because it seemed easier to use for a small 2D game. Piston&apos;s modularity seemed a bit unapproachable from a beginner&apos;s point a few.&lt;/p&gt;
&lt;h2&gt;The basic game design&lt;/h2&gt;
&lt;p&gt;I then spent a bit of time thinking about the game. The first step would be to have some floor on the screen, then some people, then some courts. Eventually, we&apos;ll need to assign people to courts, have them move there and waaay in the future, the people would have skills which would improve the more they play. There would need to be a sort of build mode so you can add people and courts and eventually all this would cost money.&lt;/p&gt;
&lt;p&gt;At this point I felt like I had enough ideas to start coding. (being PM and dev is quite fun! I&apos;d still rather have a PM though ..)&lt;/p&gt;
&lt;h2&gt;Making the game&lt;/h2&gt;
&lt;h3&gt;The beginnings: circles and abstraction&lt;/h3&gt;
&lt;p&gt;I pretty much ripped off a ggez sample and got a window with a circle in it up on the screen. Amazing! Next, some abstraction. I thought it would be a good idea to abstract the idea of a game object. Every game object can be rendered and updated, something like this (if you&apos;re rolling your eyes at this point, this was before I found out about ECS, so bear with me here). &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// the game object trait&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; GameObject &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// a specific game object - Circle&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; Circle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Point2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; Circle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Point2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; Circle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Circle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; position &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; GameObject &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Circle &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; circle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
            graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Mesh&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new_circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;DrawMode&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Fill&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;position&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

         graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;circle&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; na&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;Point2&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allowed me to have a nice list of objects which I could update and render in a nice loop. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; event&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;EventHandler &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MainState &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Update all objects&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iter_mut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; GameResult&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Draw all objects&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; object &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objects&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iter_mut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        graphics&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token function&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point &lt;code class=&quot;language-text&quot;&gt;main.rs&lt;/code&gt; was the place to be, because every single line of code was there, so I spent some time breaking that up into separate files and rationalizing the directory structure a bit, so it looked like this now. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;resources -&amp;gt; this is where all the assets are (images)
src
-- entities
---- game_object.rs
---- circle.rs
-- main.rs -&amp;gt; main loop &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;People, floors and images&lt;/h3&gt;
&lt;p&gt;The next big milestone was creating a &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt; game object and loading images. I decided everything will be tile based (currently 32x32 tiles).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/1-6424c665cb9442c5471a49d987954880.png&quot; alt=&quot;alt text&quot; title=&quot;People, floors and images&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tennis courts&lt;/h3&gt;
&lt;p&gt;I spent some time looking at images of tennis courts online and I figured I&apos;d want my tennis court to be 4*2 tiles. I would make an image that wide, or I could have 8 separate tiles. On further inspection I actually realized I only need 2 unique tiles to build the whole court. Let me explain. &lt;/p&gt;
&lt;p&gt;2 unique tiles: 1 and 2. &lt;/p&gt;
&lt;p&gt;Each section of the court is actually made up of either tile 1 or tile 2, either as is or rotated 180 degrees. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/tennis_court-26dde1e6f7ec2459c89752754a048c04.png&quot; alt=&quot;alt text&quot; title=&quot;Constructing a tennis court&quot;&gt;&lt;/p&gt;
&lt;h3&gt;A basic build mode&lt;/h3&gt;
&lt;p&gt;Now that I could render floors, people and courts I figured I needed a basic build mode. I made it so that when a key was pressed, an object was selected and click would then place that type of object. For example, pressing 1 would give you a court and pressing 2 would give you a person.&lt;/p&gt;
&lt;p&gt;That wasn&apos;t super useful as you needed to remember what 1 or 2 were, so I added a build-mode wireframe so you could at least know what object you had. Here it is in action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/wireframes-e9663de17e6b402f43cab61e3905c874.gif&quot; alt=&quot;alt text&quot; title=&quot;Wireframes&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Questioning the architecture and refactoring&lt;/h3&gt;
&lt;p&gt;I now had a few game objects: people, courts and floors. But in order to make the wireframes work I had to let every entity know if it was in wireframe mode and then in every draw call the entity would have to check if it was in wireframe mode and if it was draw a bounding box instead of an image. This didn&apos;t really feel right.&lt;/p&gt;
&lt;p&gt;I started questioning the architecture and I could see some clear limitations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having every entity render and update itself was problematic - the entity wouldn&apos;t know if it should render an image or a wireframe&lt;/li&gt;
&lt;li&gt;I had no good way of sharing properties and behaviour between entities - for example the &lt;code class=&quot;language-text&quot;&gt;is_build_mode&lt;/code&gt; property and draw behaviour. I could use inheritance (but Rust didn&apos;t have a very good way of doing this), but what I really want is composition.&lt;/li&gt;
&lt;li&gt;I had no good way of having entities interact with eachother - which I definitely needed later in order to assign people to courts&lt;/li&gt;
&lt;li&gt;The entities were mixing data and logic, which would very quickly get out of hand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I did a bit more research and I found something called &lt;a href=&quot;https://en.wikipedia.org/wiki/Entity_component_system&quot;&gt;ECS - Entity Component System&lt;/a&gt; architecture which is mostly used in games. The gist of ECS is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;separate data from logic&lt;/li&gt;
&lt;li&gt;composition over inheritance&lt;/li&gt;
&lt;li&gt;data oriented design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In ECS terminology you have these 3 basic concepts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entities: this is just a type of a thing referenced with an identifier (like a Player, Ball, etc.)&lt;/li&gt;
&lt;li&gt;Components: these are what your entities are made up of. For example, you can have a Renderable component, a Position component, etc. This is purely data storage.&lt;/li&gt;
&lt;li&gt;Systems: systems use entities and components and contain behaviour and logic based on that data. For example, you could have a rendering system which just iterates through all entities which contain renderable components and draws all of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more I read about this the more I realized it would solve my current problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could use composition over inheritance to break things out in a more systematic way&lt;/li&gt;
&lt;li&gt;I could use systems to control behaviour without ending up with spaggheti code&lt;/li&gt;
&lt;li&gt;I could share things like &lt;code class=&quot;language-text&quot;&gt;is_build_mode&lt;/code&gt; and have that wireframe logic in one place (in the rendering system). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is what I ended up with after implementing ECS (which in fairness, was pretty much a rewrite).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;resources -&amp;gt; this is where all the assets are (images)
src
-- components
---- position.rs
---- person.rs
---- tennis_court.rs
---- floor.rs
---- wireframe.rs
---- mouse_tracked.rs
-- resources
---- mouse.rs
-- systems
---- rendering.rs
-- constants.rs
-- utils.rs
-- world_factory.rs -&amp;gt; world factory functions 
-- main.rs -&amp;gt; main loop &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Assigning people to courts&lt;/h3&gt;
&lt;p&gt;After moving to ECS everything became relatively easy. I now had a systematic way of adding data to my entities and adding logic based on that data. This allowed me to very easily get the behaviour of assigning people to courts. &lt;/p&gt;
&lt;p&gt;What I did:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add data about assigned courts to &lt;code class=&quot;language-text&quot;&gt;Person&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add data about assigned people to &lt;code class=&quot;language-text&quot;&gt;TennisCourt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add a &lt;code class=&quot;language-text&quot;&gt;CourtChoosingSystem&lt;/code&gt; which iterates through people and courts, finds available courts and assigns them to people. Easy!&lt;/li&gt;
&lt;li&gt;add a &lt;code class=&quot;language-text&quot;&gt;PersonMovementSystem&lt;/code&gt; which iterates through people which have courts assigned to them and makes them move to the position of the courts (if they are not already there)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See it in action here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/people_to_courts-7b0c8ec951007ad4d5895716c3ca7618.gif&quot; alt=&quot;alt text&quot; title=&quot;People going to courts&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I had a really great time making this small game. But I especially had a great time writing so much Rust because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust makes doing the right thing easy &lt;/li&gt;
&lt;li&gt;It&apos;s very elegant and has great documentation&lt;/li&gt;
&lt;li&gt;Immutability by default is absolutely beautiful, it forces you to be explicit about mutability which makes you aware of how your data is being modified&lt;/li&gt;
&lt;li&gt;No awkward moving, cloning or copying (like I found myself doing a lot in C++)&lt;/li&gt;
&lt;li&gt;Options are really fantastic to work with and they make handling errors a thing of beauty&lt;/li&gt;
&lt;li&gt;If it compiles, it 99% of the time works as you expected and compiler errors are probably the best I&apos;ve ever seen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In terms of Rust game development, I think it&apos;s still early days, but I see a great community actively working towards making Rust more accessible to game developers. So I am optimistic about the next few years and I cannot wait to see how it evolves. &lt;/p&gt;
&lt;p&gt;Did you enjoy this post? Let me know, so I can write more!&lt;/p&gt;
&lt;p&gt;PS: If you are interested in learning more about ECS, check out &lt;a href=&quot;/posts/entity-component-system-explained/&quot;&gt;ECS explained with tennis courts and people&lt;/a&gt;, my follow-up post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Design patterns]]></title><description><![CDATA[what are design patterns? Let's start by defining design patterns. All this talk these days, but what are they really? Well, simply put…]]></description><link>http://iolivia.me/posts/design-patterns/</link><guid isPermaLink="false">http://iolivia.me/posts/design-patterns/</guid><pubDate>Mon, 31 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;what are design patterns?&lt;/h2&gt;
&lt;p&gt;Let&apos;s start by defining design patterns. All this talk these days, but what are they really? Well, simply put, design patterns are solutions to common problems in software design. To avoid solving the same problems over and over again in different ways, &lt;em&gt;we&lt;/em&gt; (the software community) have created a set of common patterns to help us. These patterns are rough blueprints which have some amount of flexibility built in so you can apply them to your usecase and/or combine them as necessary.&lt;/p&gt;
&lt;h2&gt;why should I use them?&lt;/h2&gt;
&lt;p&gt;Now for the bigger question, they are useful, I get it, but why should I use them? Well, if you are building a solution for FizzBuzz which you are going to throw away five minutes later, you probably dont need design patterns. But if you are going to build something which you&apos;ll have to extend tomorrow, ship and maintain for years to come, it&apos;s a good idea to throw in some design patterns to keep it maintainable, extensible and robust.&lt;/p&gt;
&lt;p&gt;Design patterns are less about the functional side of things, they are not algorithmically intense recipies for solving problems, but rather a question of form and style.&lt;/p&gt;
&lt;h2&gt;what are some common design patterns?&lt;/h2&gt;
&lt;p&gt;Here are some frequently used design patterns which you might have already heard of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;factory &lt;/li&gt;
&lt;li&gt;singleton &lt;/li&gt;
&lt;li&gt;facade&lt;/li&gt;
&lt;li&gt;decorator&lt;/li&gt;
&lt;li&gt;iterator &lt;/li&gt;
&lt;li&gt;adaptor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If none of these ring a bell don&apos;t worry about it, we&apos;ll cover them in another post.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[FizzBuzz in 10 languages!]]></title><description><![CDATA[FizzBuzz , as you might have heard, is a simple programming challenge given as an interview question to see if someone can code or not…]]></description><link>http://iolivia.me/posts/fizzbuzz-in-10-languages/</link><guid isPermaLink="false">http://iolivia.me/posts/fizzbuzz-in-10-languages/</guid><pubDate>Sat, 29 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://www.hackerrank.com/challenges/fizzbuzz/problem&quot;&gt;FizzBuzz&lt;/a&gt;, as you might have heard, is a simple programming challenge given as an interview question to see if someone can code or not. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Write a short program that prints each number 
from 1 to 100 on a new line. 

&amp;gt; For each multiple of 3, print &amp;quot;Fizz&amp;quot; instead of the number. 
&amp;gt; For each multiple of 5, print &amp;quot;Buzz&amp;quot; instead of the number. 
&amp;gt; For numbers which are multiples of both 3 and 5, 
print &amp;quot;FizzBuzz&amp;quot; instead of the number.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple modulo operations to see if something is divisible by 3 and/or 5, a loop and printing to the console. It doesn&apos;t sound complicated. And it isn&apos;t, unless you are doing it in an obscure language you&apos;ve never used before or in a programming paradigm which is less than common. So the thought occurred to me, FizzBuzz is actually perfect for learning the basics of a new language. It&apos;s simple enough, it doesn&apos;t leave much room for interpretation and we&apos;ve all done it before in a language we are familiar with. &lt;/p&gt;
&lt;p&gt;So I thought to myself, why not use some time this holiday to experiment with FizzBuzz? Oh boy did I experiment. &lt;/p&gt;
&lt;h2&gt;javascript (node)&lt;/h2&gt;
&lt;p&gt;I started with JavaScript, more for calibration purposes if nothing else. To remind myself of the problem and do it in a language I am very familiar with. Nothing special, here it is. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; divBy3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; divBy5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;divBy3 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; divBy5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`FizzBuzz`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;divBy3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`Fizz`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;divBy5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;`Buzz`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;haskell&lt;/h2&gt;
&lt;p&gt;Then I thought, you know what I haven&apos;t used in a while? A functional language. I did a bit of Haskell in university so this wasn&apos;t soo unknown to me, but it wasn&apos;t super easy either. About 20 minutes. The hardest part was probably the fact that there is no loop, the loop is implicit. But this code is really elegant.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;                    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;                    &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;otherwise&lt;/span&gt;                       &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;token builtin&quot;&gt;putStrLn&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;unlines&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fb&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;rust&lt;/h2&gt;
&lt;p&gt;Rust. I&apos;ve been hearing about rust from a bunch of people, and now I finally got around to trying it. It was quite nice, I liked the pattern matching. I can&apos;t say I got into the more complex aspects of the language like the reference counting or friendly compiler messages, but I liked what I saw so far. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;rust&quot;&gt;&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;python&lt;/h2&gt;
&lt;p&gt;Not even worth discussing. Probably around a minute.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  divBy3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  divBy5 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; divBy3 &lt;span class=&quot;token operator&quot;&gt;and&lt;/span&gt; divBy5&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; divBy3&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; divBy5&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;ada&lt;/h2&gt;
&lt;p&gt;Now, this one was quite interesting. My observations were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it reminded me a lot of Pascal with the &lt;code class=&quot;language-text&quot;&gt;:=&lt;/code&gt; assignment syntax and &lt;code class=&quot;language-text&quot;&gt;begin&lt;/code&gt;s and &lt;code class=&quot;language-text&quot;&gt;end&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;I thought it was a bit verbose&lt;/li&gt;
&lt;li&gt;I found it a bit ugly (I mean &lt;code class=&quot;language-text&quot;&gt;for I in Integer range 1 .. 100 loop&lt;/code&gt; is quite considerably less elegant than &lt;code class=&quot;language-text&quot;&gt;for x in 1..101&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall it was an enjoyable experience though, I can&apos;t complain.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;ada&quot;&gt;&lt;pre class=&quot;language-ada&quot;&gt;&lt;code class=&quot;language-ada&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Ada&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Text_IO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Ada&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Text_IO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Ada&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Integer_Text_IO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Ada&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Integer_Text_IO&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;procedure&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;is&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Div_By_3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Div_By_5&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;For_Loop&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;loop&lt;/span&gt;
  
      &lt;span class=&quot;token variable&quot;&gt;Div_By_3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token variable&quot;&gt;Div_By_5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Div_By_3&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Div_By_5&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt; 
        &lt;span class=&quot;token variable&quot;&gt;Put_Line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Div_By_3&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;Put_Line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Div_By_5&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;Put_Line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token variable&quot;&gt;New_Line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      
   &lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;For_Loop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;go&lt;/h2&gt;
&lt;p&gt;Probably around a minute (even though I don&apos;t know go). At this point I realized a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it&apos;s getting a little repetitive, so maybe it&apos;s time to pick a wilder language&lt;/li&gt;
&lt;li&gt;I developed a system for breaking the problem down:&lt;/li&gt;
&lt;li&gt;how do I loop though a list of numbers? (which normally also comes with the how to print those numbers)&lt;/li&gt;
&lt;li&gt;how to do a modulus operator?&lt;/li&gt;
&lt;li&gt;how to do an else-if&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;go&quot;&gt;&lt;pre class=&quot;language-go&quot;&gt;&lt;code class=&quot;language-go&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;package&lt;/span&gt; main

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        divBy3 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
        divBy5 &lt;span class=&quot;token operator&quot;&gt;:=&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; divBy3 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; divBy5 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; divBy3 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; divBy5 &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            fmt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;brainfuck&lt;/h2&gt;
&lt;p&gt;So, remember how I was saying I was getting a little bored? Enter brainfuck. Let me start by saying this language really serves its name. I am going to assume you don&apos;t know anything about it (because let&apos;s be honest, it&apos;s not taught in CS101), so I will tell you it only supports these operations: &lt;code class=&quot;language-text&quot;&gt;&amp;lt;&amp;gt;+_.,[]&lt;/code&gt;. You have a registry of numbers (255 I think) and you can do left right on the registry, increment and decrement, print something and loop while a registry&apos;s value is not zero. Yep. That&apos;s it. That is literally everything that comes as part of a language. &lt;/p&gt;
&lt;p&gt;So I took a small intermission to the problem solving to read these guides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/roachhd/dce54bec8ba55fb17d3a&quot;&gt;BrainFuck Programming Tutorial by: Katie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.klipse.tech/brainfuck/2016/12/17/brainfuck.html&quot;&gt;Brainfuck for dummies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://esolangs.org/wiki/Brainfuck_algorithms&quot;&gt;Brainfuck algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then I thought, ah, let me see how I can print a list of numbers. Well, here is &lt;a href=&quot;https://esolangs.org/wiki/Brainfuck_algorithms&quot;&gt;a page&lt;/a&gt; telling you how to do: &lt;code class=&quot;language-text&quot;&gt;x = 0&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;x = y&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;x = x &amp;lt; y&lt;/code&gt; ... Umm, ok. This approach &lt;em&gt;might&lt;/em&gt; not work. &lt;/p&gt;
&lt;p&gt;Fast forward a couple of hours, I figure out how to print Fizz. Here it is. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;brainfuck&quot;&gt;&lt;pre class=&quot;language-brainfuck&quot;&gt;&lt;code class=&quot;language-brainfuck&quot;&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token pointer keyword&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token pointer keyword&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token pointer keyword&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token increment inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token pointer keyword&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I change my approach for this one to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;figure out how to print a string&lt;/li&gt;
&lt;li&gt;figure out how to print a number&lt;/li&gt;
&lt;li&gt;figure out how to do modulo&lt;/li&gt;
&lt;li&gt;figure out how to do and if statement&lt;/li&gt;
&lt;li&gt;figure out how to do if x = 0&lt;/li&gt;
&lt;li&gt;figure out how to do if x and y&lt;/li&gt;
&lt;li&gt;figure out how to store one number&lt;/li&gt;
&lt;li&gt;figure out how to check if that number is divisible by 3&lt;/li&gt;
&lt;li&gt;... then by 5&lt;/li&gt;
&lt;li&gt;... then by both&lt;/li&gt;
&lt;li&gt;... then by neither&lt;/li&gt;
&lt;li&gt;connect this with the prints&lt;/li&gt;
&lt;li&gt;loop through a list of numbers &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the time of writing this, I got through everything apart from the loop. So the code below will print &lt;code class=&quot;language-text&quot;&gt;Fizz&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Buzz&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;FizzBuzz&lt;/code&gt; or the numbers correctly, given a hardcoded number. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
&amp;gt;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++&amp;gt;+++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++&amp;gt;++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++&amp;gt;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&amp;gt;
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++&amp;gt;++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++&amp;gt;+++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++&amp;gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;+++++++++++++++&amp;gt;&amp;gt;+++&amp;lt;&amp;lt;[&amp;gt;+&amp;gt;-&amp;gt;+&amp;lt;[&amp;gt;]&amp;gt;[&amp;lt;+&amp;gt;-
]&amp;lt;&amp;lt;[&amp;lt;]&amp;gt;-]&amp;gt;&amp;gt;[-]&amp;gt;&amp;gt;+&amp;lt;[&amp;gt;-&amp;lt;[-]]&amp;gt;[&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;.&amp;gt;.&amp;gt;.&amp;gt;.&amp;lt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-]&amp;lt;+++
++&amp;lt;&amp;lt;[&amp;gt;+&amp;gt;-&amp;gt;+&amp;lt;[&amp;gt;]&amp;gt;[&amp;lt;+&amp;gt;-]&amp;lt;&amp;lt;[&amp;lt;]&amp;gt;-]&amp;gt;&amp;gt;[-]&amp;gt;&amp;gt;+&amp;lt;[&amp;gt;-&amp;lt;[-]]&amp;gt;[&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;.&amp;gt;.&amp;gt;.&amp;gt;.&amp;lt;&amp;lt;&amp;lt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-]&amp;lt;+++&amp;lt;&amp;lt;[&amp;gt;+&amp;gt;-&amp;gt;+&amp;lt;[&amp;gt;]&amp;gt;[&amp;lt;+&amp;gt;-]&amp;lt;&amp;lt;[&amp;lt;]&amp;gt;-]&amp;gt;&amp;gt;[-]&amp;gt;&amp;gt;+&amp;lt;[&amp;gt;-&amp;lt;[-]]&amp;gt;[&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;+&amp;lt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;-]&amp;lt;+++++&amp;lt;&amp;lt;[&amp;gt;+&amp;gt;-&amp;gt;+&amp;lt;[&amp;gt;]&amp;gt;[&amp;lt;+&amp;gt;-]&amp;lt;&amp;lt;[&amp;lt;]&amp;gt;-]&amp;gt;&amp;gt;[-]&amp;gt;&amp;gt;+&amp;lt;[&amp;gt;-&amp;lt;[-]]&amp;gt;[&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;+&amp;lt;&amp;lt;&amp;lt;
&amp;lt;&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;lt;[&amp;gt;&amp;gt;[-]+&amp;lt;&amp;lt;[-]]&amp;gt;[&amp;gt;[-]+&amp;lt;[-]]&amp;gt;[&amp;lt;&amp;lt;+&amp;gt;&amp;gt;-]&amp;lt;&amp;lt;&amp;gt;+&amp;lt;[&amp;gt;-&amp;lt;[-]]&amp;gt;[&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
[&amp;gt;&amp;gt;+&amp;gt;+&amp;lt;&amp;lt;&amp;lt;-]&amp;gt;&amp;gt;&amp;gt;[&amp;lt;&amp;lt;&amp;lt;+&amp;gt;&amp;gt;&amp;gt;-]&amp;lt;&amp;lt;+&amp;gt;[&amp;lt;-&amp;gt;[&amp;gt;++++++++++&amp;lt;[-&amp;gt;-[&amp;gt;+&amp;gt;&amp;gt;]&amp;gt;[+[-&amp;lt;+&amp;gt;]&amp;gt;+&amp;gt;&amp;gt;]&amp;lt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;]&amp;gt;[-]++++++++[&amp;lt;++++++&amp;gt;-]&amp;gt;[&amp;lt;&amp;lt;+&amp;gt;&amp;gt;-]&amp;gt;[&amp;lt;&amp;lt;+&amp;gt;&amp;gt;-]&amp;lt;&amp;lt;]&amp;gt;]&amp;lt;[-&amp;gt;&amp;gt;++++++++[&amp;lt;++++
++&amp;gt;-]]&amp;lt;[.[-]&amp;lt;]&amp;lt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;-]&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow. I spent a good afternoon on this and I solved like 80% of the problem. 1435 characters. But I will say this, getting anything to work in brainfuck was amazing. Even printing something so simple as Fizz is incredibly rewarding, cause you have to build those ASCII codes yourself. &lt;/p&gt;
&lt;p&gt;The best part though, in a normal language when you are stuck on something, you can easily google around for an answer. You look at some snippet of code and you&apos;re like: ah, I get it now. I was so silly. Doing the same for brainfuck just doesn&apos;t work. You look at how to do a modulus, you see &lt;code class=&quot;language-text&quot;&gt;[&amp;gt;+&amp;gt;-&amp;gt;+&amp;lt;[&amp;gt;]&amp;gt;[&amp;lt;+&amp;gt;-]&amp;lt;&amp;lt;[&amp;lt;]&amp;gt;-]&lt;/code&gt; and you&apos;re like: well, I (still) don&apos;t get it. &lt;/p&gt;
&lt;p&gt;But it was fun! It also piqued my interest into the &lt;a href=&quot;https://en.wikipedia.org/wiki/Esoteric_programming_language&quot;&gt;esoteric languages&lt;/a&gt;. Shakespeare and Chef also sounded interesting but didn&apos;t get to those yet. &lt;/p&gt;
&lt;h2&gt;bash&lt;/h2&gt;
&lt;p&gt;I needed a quick break to keep me going after the brainfuck adventure and bash did the trick. Ugly syntax if you ask me but overall nothing special or unexpected.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# GNU bash, version 4.3.46&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expr&lt;/span&gt; $i % 3&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expr&lt;/span&gt; $i % 5&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expr&lt;/span&gt; $i % 3&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;expr&lt;/span&gt; $i % 5&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$i&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;prolog&lt;/h2&gt;
&lt;p&gt;You know you&apos;re off to a good start when you see you can&apos;t do a for loop. I thought this might be the second brainfuck but it ended up being quite easy and enjoyable actually. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;divBy3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;divBy5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;print_fizz_buzz&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt; 
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;divBy3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;divBy5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    	&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    	&lt;span class=&quot;token operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;divBy3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    		&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    		&lt;span class=&quot;token operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;divBy5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    			&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
    			&lt;span class=&quot;token operator&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;print_numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_fizz_buzz&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;print_numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_fizz_buzz&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_numbers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;lolcode&lt;/h2&gt;
&lt;p&gt;Now, at last, another esoteric language, LOLCODE. It looks weird, it&apos;s weird to write, it&apos;s weird to read and just weird all around.  &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;lolcode&quot;&gt;&lt;pre class=&quot;language-lolcode&quot;&gt;&lt;code class=&quot;language-lolcode&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;HAI&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;IM IN YR&lt;/span&gt; &lt;span class=&quot;token label string&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPPIN&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;YR&lt;/span&gt; var &lt;span class=&quot;token keyword&quot;&gt;TIL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;BOTH SAEM&lt;/span&gt; var &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;101&lt;/span&gt;

    &lt;span class=&quot;token operator&quot;&gt;DIFFRINT&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; var
    &lt;span class=&quot;token keyword&quot;&gt;O RLY?&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;YA RLY&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;I HAS A&lt;/span&gt; by3 &lt;span class=&quot;token keyword&quot;&gt;ITZ&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;BOTH SAEM&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;MOD OF&lt;/span&gt; var &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
    	&lt;span class=&quot;token keyword&quot;&gt;I HAS A&lt;/span&gt; by5 &lt;span class=&quot;token keyword&quot;&gt;ITZ&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;BOTH SAEM&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;MOD OF&lt;/span&gt; var &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
    	
    	&lt;span class=&quot;token operator&quot;&gt;BOTH OF&lt;/span&gt; by3 &lt;span class=&quot;token keyword&quot;&gt;AN&lt;/span&gt; by5 
        &lt;span class=&quot;token keyword&quot;&gt;O RLY?&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;YA RLY&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;VISIBLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;
          &lt;span class=&quot;token keyword&quot;&gt;NO WAI&lt;/span&gt;
        	by3
            &lt;span class=&quot;token keyword&quot;&gt;O RLY?&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;YA RLY&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;VISIBLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;
              &lt;span class=&quot;token keyword&quot;&gt;NO WAI&lt;/span&gt;
                by5
                &lt;span class=&quot;token keyword&quot;&gt;O RLY?&lt;/span&gt;
                  &lt;span class=&quot;token keyword&quot;&gt;YA RLY&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;VISIBLE&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;
                  &lt;span class=&quot;token keyword&quot;&gt;NO WAI&lt;/span&gt;
                    &lt;span class=&quot;token keyword&quot;&gt;VISIBLE&lt;/span&gt; var
                &lt;span class=&quot;token keyword&quot;&gt;OIC&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;OIC&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;OIC&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;OIC&lt;/span&gt;
	
&lt;span class=&quot;token keyword&quot;&gt;IM OUTTA YR&lt;/span&gt; &lt;span class=&quot;token label string&quot;&gt;loop&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;KTHXBYE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;what have I learnt&lt;/h2&gt;
&lt;p&gt;10 languages and a couple of afternoons later, what have I learnt? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I genuinely enjoy writing code even for the sake of writing code&lt;/li&gt;
&lt;li&gt;Most languages that we use every day really aren&apos;t that different from each other on a fundamental syntax level, they all have for loops and ifs and variables, etc.&lt;/li&gt;
&lt;li&gt;Functional, declarative and low-level languages are fundamentally different from the rest and programming in them requires a complete mind shift (like operating on a list in haskell using recursion instead of a loop, or moving the register pointer around in brainfuck)&lt;/li&gt;
&lt;li&gt;Language syntax has evolved somewhat from verbose to implicit and elegant (not sure if that is a good or bad thing, probably neither)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you&apos;are after the code, it&apos;s all on &lt;a href=&quot;https://github.com/iolivia/fizzbuzz&quot;&gt;github&lt;/a&gt;. Let me know what you thought of my FizzBuzz challenge and if you want to make your own and/or contribute to the repo let me know!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[2018 year in review]]></title><description><![CDATA[I've been reading a couple of year in review blog posts these days and I got inspired to write my own. 2018 has been a great year and it's…]]></description><link>http://iolivia.me/posts/2018-year-in-review/</link><guid isPermaLink="false">http://iolivia.me/posts/2018-year-in-review/</guid><pubDate>Fri, 28 Dec 2018 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I&apos;ve been reading a couple of year in review blog posts these days and I got inspired to write my own. 2018 has been a great year and it&apos;s worth looking back and analyzing what made it so great. &lt;/p&gt;
&lt;h2&gt;speaking&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I was part of a panel for the first time at the Amazon Women Innovation event in London! I got some really touching feedback from some of the attendees after the event and I&apos;m glad I could provide even a little bit of inspiration and insight into a career in tech!&lt;/li&gt;
&lt;li&gt;I ran the third edition of my &quot;Let&apos;s build Amazon Video in 2 hours&quot; talk+workshop at the Prime Video offices in Santa Monica, California. It was absolutely amazing to run this for the third time, I had upgraded the slides and the content so much it was eseentially a new workshop around the same theme. The attendees were brilliant, they asked great questions which made me think and it was amazing to see them get what I was explaining and be excited about video 😄&lt;/li&gt;
&lt;li&gt;Technically cheating but, I also mentored someone through giving the same talk, which was really important to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;travelling&lt;/h2&gt;
&lt;p&gt;I travelled a lot this year 🛫&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7 countries (3 of them for the first time)&lt;/li&gt;
&lt;li&gt;10 new cities (most notably Edinburgh, Bruges, Reykjavik, Santa Monica and Madrid)&lt;/li&gt;
&lt;li&gt;I saw more of my home country and I spent more time than I normally do with my family (which is a win-win)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;work&lt;/h2&gt;
&lt;p&gt;Work has been incredibly rewarding and eventful this year. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I helped &lt;a href=&quot;https://www.theverge.com/2018/12/5/18125665/amazon-prime-video-comcast-xfinity-x1-streaming&quot;&gt;ship Prime Video on some million Comcast devices&lt;/a&gt;  and I really grew as a result of this project. I was the tech lead for some of the video bits of this and it was truly incredible and satisfying to take this project from zero to a hundred in not that much time and finally see it in the hands of customers.&lt;/li&gt;
&lt;li&gt;I left Amazon 😞😄 to go work for an early stage startup, which was a really big step!&lt;/li&gt;
&lt;li&gt;I met &lt;a href=&quot;https://twitter.com/Maisie_Williams&quot;&gt;Maisie Williams&lt;/a&gt; and shortly after I joined &lt;a href=&quot;https://daisie.com&quot;&gt;Daisie&lt;/a&gt; 🧡. Very excited about the amazing team we have and what we are building. Excited and at the same time terrified about the launch, which can only be a good thing.&lt;/li&gt;
&lt;li&gt;Overall in 2018, I feel like I&apos;ve become a better engineer and a better leader. I became more mature in my engineering decisions, I started caring more about the business and product impact of the tech, mentoring and helping others and generally trying to be a good example. I can&apos;t say if that worked (I&apos;ll leave that to you guys), but it&apos;s something I am going to keep working on.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;health&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;this is the one aspect I&apos;ve been failing on consistently in the last few years and 2018 was no exception. I tried eating healthier, exercising more, walking more, taking the stairs more, but the truth is it wasn&apos;t even close to what it should&apos;ve been. Another improvement point for 2019.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;books&lt;/h2&gt;
&lt;p&gt;I read a lot this year, 11 books (out of 15 planned, don&apos;t look at me with those eyes goodreads, I still have 2 and a half days to get this back on track).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I read more distopias - Handmaid&apos;s tale, The heart goes last and Farenheit 451 &lt;/li&gt;
&lt;li&gt;I discovered I love Margaret Atwood and I&apos;m planning to make my way through more of her books (yes, I tend to find something I like and obsess over it, I can feel your judgement)&lt;/li&gt;
&lt;li&gt;I discovered Tom Clancy&apos;s Jack Ryan (mostly inspired by the TV show in all honesty) so I blame the length of his books for missing the goodreads goal really&lt;/li&gt;
&lt;li&gt;I read and wholeheartedly recommend &lt;a href=&quot;https://www.goodreads.com/book/show/26030703-disrupted?ac=1&amp;#x26;from_search=true&quot;&gt;Disrupted&lt;/a&gt;. It was a fun little read and I would not be surprised at knowing how much of that is true. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;blog&lt;/h2&gt;
&lt;p&gt;Let&apos;s skip this one and get back to it for the 2019 review, shall we? (at least I deployed this site, that&apos;s something ..).&lt;/p&gt;
&lt;p&gt;2018 has been great, but I am really looking forward to 2019 and trying to break more boundaries.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to deploy a personal Gatsby site to Github pages]]></title><description><![CDATA[I recently revamped my personal website to use  Gatsby  and I spent a little more than I thought it was necessary to figure out how to…]]></description><link>http://iolivia.me/posts/7-gatsby-deploy-github/</link><guid isPermaLink="false">http://iolivia.me/posts/7-gatsby-deploy-github/</guid><pubDate>Sat, 01 Dec 2018 12:59:00 GMT</pubDate><content:encoded>&lt;p&gt;I recently revamped my personal website to use &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; and I spent a little more than I thought it was necessary to figure out how to deploy it to Github pages as my personal website at the root of &lt;code class=&quot;language-text&quot;&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; so I wanted to share what I did with you so you don&apos;t have to spend that extra time reinventing the wheel. &lt;/p&gt;
&lt;p&gt;First, install the &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; plugin. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;npm install gh-pages --save-dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add a deploy script to &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt;. We&apos;ll use this script to trigger a deployment from our local command-line to github pages. Note that we are saying we&apos;ll be deploying to the &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; branch as enforced by Github.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ...
    &lt;span class=&quot;token property&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now here is where it gets tricky, if we just ran &lt;code class=&quot;language-text&quot;&gt;npm run deploy&lt;/code&gt; at this point what will happen is that this command will build our site and create a new commit which just has the statically built version of the website. This means the source code is buried under this commit and if we want to make updates, well ... we can&apos;t. &lt;/p&gt;
&lt;p&gt;So here is what we are doing to do instead:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master -&gt; we&apos;ll use this for publishing only (because we have to) so this will only every have the statically built version&lt;/li&gt;
&lt;li&gt;master-source -&gt; we&apos;ll use this for keeping the source code and we&apos;ll run &lt;code class=&quot;language-text&quot;&gt;npm run deploy&lt;/code&gt; from it (which will take the code in master-source, build it and push it to master, where github pages will get it from)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So take the branch you have all your source code in, presumably master, and let&apos;s create the &lt;code class=&quot;language-text&quot;&gt;master-source&lt;/code&gt; local and origin branch.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;git checkout -b master-source
git push --set-upstream origin master-source&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now from the master-source branch run this to get your site deployed. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;npm run deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see something like this at the end if all went well.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm run deploy
....
....
success Building static HTML for pages — 0.604 s — 9/9 44.66 pages/second
info Done building in 11.112 sec
Published&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Navigate to &lt;a href=&quot;https://username.github.io&quot;&gt;https://username.github.io&lt;/a&gt; and everything should be there waiting for you &lt;img class=&quot;emoji-icon&quot; data-icon=&quot;emoji-smiley&quot; style=&quot;display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px&quot; src=&quot;data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAV8klEQVR4Ae2bBZAjR5P9f1nVIGk0jMvgBdvnj830MTP6mJmZmZmZmZmZYU1r3xnWsMyzOwyi7qr8q6WKGP0nZsfsw4p4kQNZqXxPWagW/9f+r/1f+1/dhBe4fT2Yj/5o9kbKSzB8mAj7BKaMlSGUSsii5p0uKFxU5SieR3LhoV/+ZY4D/gUV4OtfGNJy4mO4UYV3xZY3mViutbGpmMRgEkGMgF2nvVPUK75VwOMyX/OZPpo5/lKUP9zzS9wD6H/pCrjvnVRGh/iQsXxiUjK32bIxpmIxaUFcEeMRq20IyLqXVkVdAUG9wbcE3/T4msPVvW81/L94x8/OLvCbQO15E6Cd9HNuy8tEu3fw0VEsX5SUzXW2P8L0GWxJMbFH0gRTHsIObIW+CaQyhSRVxCQAqG+hrRW0dhFWL+GWzuPrC2izhc8MriH4VY9bzmnV/cN5pt9z8gy/DOTPWYC/ew3PqW3dyo2lmG8tVe3ro8GIaMAiqcOUIqKhHZipV2AmX4VU9yGlEYgqIBaEnooWUEAd5DW0MYeuHMVP34+/+AD5whl8I0eblnzJkS/mNFbc3zQyvhK45zkJ8PhH8qzawV9Fjn8UX1iqyDckw3GfHYqJKh5TiYgmX4Ld9SbM+I1QHgnkcsCDBtICKBv8LIABiUCA+hz+8j24U39JPv0QvpaT1wxuIaM1n602avp1e3+F7wX0xZoD5L4PMjBe5odL/faj47GEaNBiy45o4gB23/sxEzdDVAJtgTpEDM+mqfpQLQnkDfylQ7ijv0N+6Qlc3ZIvOrKZFo1l98uX63z29b/FEqAvpABy+F1sGRnhVyqD0WviyYSoX4iqbXvVmzG734+kQ+AbCIDIs3s1Zb0SKIApoc0F/Mm2CMf+gnylRb6sZNMtaov538/N8VGv/EMuAPr8CxDIj43w+6XR+IZ0PMX2QzQ8THTNR2Am7wDNEDyIPL9rjPYKYUBi/PQ/kR/5NfL5edwyNC83acxm987M8Z5nIoJ9uuT//M0M75rgt9rkb02nUuygEI+OEb/kUzBjL0f8KqI54KCwBQj2+QIO0byNBlLdhRnchaw+jlLHJBbxui3B3/DmSf7gl4/R4Gm06GlWibl6ih8sDUd3phMpdsAQDw8RXfMxmIHdkM2DmN7J7AWpgN7fxdWR9mtH134MHPkFkAVSn4LXO6/W/AeBjwM8oM++AgL5Jz6aL6wO2S9KptI28Yi4PyXa9x5k6GDnnQe/8TuemC6yFvjsmb3b4qEcAR7y5obVgK9DOoIp9SMrT4BRMIJp+Zd+6gFd+aH/4NCzHwKB/L9+kFdNDMjPtcs+SUbS7qS3/VbMxI2gdcAjG5IXHrr/Mf7p7w6zd+coUWrAPU0RrNJYWeX3f/cfcM06k9uHIW+tH1ooDnwTKU0gtKB+BhELgGm4W9+/l7/6mUe5+MwFCOQ/ZpLSe67jFyrjyf5kPCUesNiRLditrwOjoDlCDuqA/5/8Iw88wVd/9U/z93/7EJdnLnPrbVdjyMBvTh7Jcd7x3d/16/zKL/0dhw49yEuu2c7EtqE1EQJEg6CaIaVxaJ5F3CqIIE6TUuYOzp7nN/5jFfdMBTCA/c338JEDQ/Zzk8mUaCjF9lns1E1IZaKrPL2TXgA53mf8yA/+HvX5GXZPxRw9ep5dO8bZvncMWs3NBUgN9/zTw/zeb/4N+7bGaN7i3Pk5Xn3n1YgPAq4XwbdhLNIGtVOAAVWk4XfdsEWP/fBDPARowHqiG7/7X3EjA32pfGk0HGP72ygJpjrW2cfjVhCtg2+Ar/cCTIuTT57hwulz7BqPmRgwjFfh0L8+BFkNOv2uAK0XPoVv0afoW8QoYhUxi9gb9GsUuXRzqkwWORa5dnIuci84FFwCV3k6AhjAfsQ+3p8O2IPRQIQpt5EapLoNRBFfWyPv1sG0OPrkWSLfZKBkqKbCSH/E+TMXqS8sgjaC7wbQRsen8C36FH2LGEWsImYRe32fIEI3J9EixyLXTs5F7gWHggtgAfNUAkiBm0ZI+0vySdGAxfRF2JJB0hQpDSKdF2yCb2yMrMH585cpx0Js2zBQTgzNWo3pS3PAJn1pdnwK36JPbChiFLE6McmC34ZoFrl1c0zTIudO7gWHgkvBicBvs32AAPbb7+SV5Ypcb6sRpmQxiUGSMmKiruqiXLFlnsX5ZdJYsAaMdEmoy1lcWAJNwDk2bJHt+BS+sTUYAWsoYhUxuwK4FldsKkWOnVxNknVyLziUK9n1336nvvK1v8+/rd8bRBuV/2TVvCuu2s5lhk0sEhmIUqA747IJf7yn0WgQWUGEDoyhQ7pRXwUGwGds3OKuj3MYY0J/ilidmPgCLTZvUuRa5NzJ3VUsBZfJKu8Cfw/gAL+RAAKYvcPE5ZK+Vjo3ORaJDRIJxkbgm4Bn0+Yd6nKMCEJQVUAA9VkgkV+5r8+Q0AcIP3cqKIz3jM2b6eTqI+nkXnAouJRL+WsLbsfnyQnpbCjA172KvWlJDtqyRRKLKQSwFsKmA/WbH6tUSdOImrLWFExkiKMMsqU28nWVKICBKOr4FL4osBayExNthQrgylUoBnCILXLXDoeCS8Hp616lez/urzmymQB2Rz8viVJT7sykkYANdahN8DWuuOHXAr7jVx2AWb/m5RWi2FItzcHqAmR+AwYC3rR9fMfX61pY7+nERJfB+UAytPW5qHZzlW7uBYeCS8FpR79/CfAEIFccAkNlc61NBYnbsAYx0gGaQb4MptT74qAu7PMLOLAwMe456kC1i9xBnBpGhw04f+WTkvMdn8I3dz70h8x1Y5JNQ4twSRKDaUNsb6xQpVnIO3CIhYJTwQ38711JAFMgjfQqiQxiC4QZTIJ/vgrSAjEE8l2gPQlYdmxPcSI4rxgjNFue4akSwwMRNDKu2Dwdn+GxhPrFGr5sixhFrE5MPD2v2QInILYLJFRgiB9mX7FBhMiQRvlVgAmAnh8kwMbCBKH0RQJ5DKiEemyBa4BrhkQAZA0tz77dZfqGEupNJXew2lAOXNuPjdl8BVE6PoVv0Sd3FDGKWEXMTmyQAj35uG4uLqwQCmjIWQIHKxAJHW5gAQnArBsCsY0YkjDusSCEmKrrSjcksB65MlCFV94+wqX5nNmFnGgg4ZZbBqCegWy+ghU+hW/Rp+hbxChiFTHJdeMdvQqqa1ZVgwuBrlBwKrgBMSGLjQQwRiiJAYEQLPwQRFiD74AACBCFpQZvfuMQ171+inyoxPs/ZScTVQ+ZA/zmyFzhW/Qp+hYxilidmIiu+WkXGkDIiw4ItmsEEAMFN8BsMAf0LNkCSk+QQBYFEQBC1E1ufhyUFlf4pE8Yp2GmKC3X4dJqCKBPfTs5X+OVe/q49nsOUPIOzi2B82s+IT2UkM4GQXryhy4nESAIEKDRurXEOE8DRyDtUBVEbXACIfBHQTagIwEth5yapWQFdQr26d2SaXBgZpnS/Er4zBAwG3+OoEqwsvZnJeTpuvAeHBTceiLphmeB3LNUdFCXtyGgQQxZW2eNUUgFvHag2qOrBouukemR+ZncT6sHBLDBoTdG2A6IFUDwTUVV0JAjAB3iWeDiKbhtdimqAM2cmY5ivlDPoN4g+J4aURZXPPf+W87WSeGq3YY0nLbxgKMrCoAQ8CwvQS3ge/QxAhFggAyW5+DIUUeWCTe+JMJaQf2aUOq1DRe4+A43QDY6DGkAiy05tTXTbtn6cNnpBTUgCKak/O7vNviRn20wNWLYud2wf7/h2oOGPbulI0q1ClISsLqWfSCC36Qaej807rW54GvK4gKcOaccO64cecxx9Ljn7HnPag4/8I0Vrn9ZjG8A9Eze3qO5opl2uIFypSGgQH5qyR872LJ4p3jvMWrCeKcLCw7YPmAYTZWZ0zknn4A//RMo98HQEExtsWyZkraFyQlhdBT6B4RSGdIEIgtxAtYCClkOeasNB40G1GuwuKTMzsDFaW0Dzl/wTF/0LC9Bqw5lCwMl2DlgmakpmSgYhxgJIocR6n2XSwsKboC70nHYA/m/XOD46/f7BpkvqTOo94AgBhAPwK490Jcq1bEh9r7qtdTrDWbOPsnSzBzLywtM/7vjnnvpPQ53CJfLkKRd4nEQQoEsg7wNVwhQL0To/k4oQhFIS1AeSBnZNsjg1CRjW/ZhmitM3//3DEc5W7aEnWlY73CgPlRy7nFN3yi4ARngryRA9ouPcPYLb+BYqakfpnkoIUxYSwHv2bUbNFbc6Faue+enkkQRmjfIsxa1hQuszM1SX1lgcfoYq3OLnbN8s7FMc3mhbVc6STUyT15zgBCnFpMKibX0Tw1Q6hsiLfVRKqf0j0/QP7aHcl+1badIq6NESYJEZWbOneDJw//C2GTO+BjgFIxCDgrd3DPFN5WVOscKbpsJoEBzNSObXpJDo4UAwZXe84uD7VuFkR2G46dOsjxzlm0792PSmCRJSHfuJW7bKIqw1iBiMNageQuX1XBtK4AgaIiLAVAUsHG5A8R2y1c9LnfkeU6r2aTZrJO1MjAR02ee4FyxZ7glpq8f/CIgAb039XWl4LSadRg1Ab2SABlQ/+sz/p8P7DCfEDXUuBaYkobrJlCg0g8vvSHiwV9e5Z/+8jd5z0d9PmPjk0SRxQiIOgyG2EYdIeI4bqOfJNmCjeKOny0EEgDInce5Lsk8y2hlLbJWq0u6laH4TszIGky5go1yTh1/gn/569/GWLj+ZgMeMCAKXgGnuIJ8Q8kb6gtOQD1w1Ct9LiBAfPgi7qOv4aZKVSZtuXs0Nm1IEl5EoH/UcO8h5eypozxw3z9y4cI5RCz9g8MMDA5RrvSRlsodAaIghDGCETrWtiEiAHjv8K4LACkg3VuoopqMtTinXJ6+wIP3/Qt//nu/yF///k/QmrnA1fsjPuYjI5IWhJ5oq7sv8KuefNEzc9E/9Il/ys83PZeB1c3uBD1QX8qoP3hef/9N4/6l2jBQWdt+SyTQUg7sE265zfLgv0C9eYbDf/2r/Ntf/SqDY9vZvvsarr7ulezYdYDd+w4yMbmVarWfcmWQNIlZ3wpxCgCs1uqsrq6wsrLCuTPHOXXiGCePPsITRx7gwqnHqS/PUY1gSz+YkuXNb4uoVkAbAAK+57OapqLLnoJLwQk68JvdCmtwWvqqf+YfbtrhT44M+t2mLJgySGLAKohAU3nPXRHnHvX0RTEHx2Ap88zVznLxkbM8ef9f4YC4XKGvf5ShkXFGJrYyPDJJUqpQbiNNElQLAes0G3XqtWXmZy4we/kCi/Mz1FdmyZsZqYGBMuyqwshoRNUK2apS3i28/o0GVhWshKsCQVseX/e4Zd+O408WXIClwE03EwAgB5aPLbL8b2f0F98y5L/W9hl8GUwKxAIWaNDZ+Lz2AzH3/FbG9iHTKdWWN9QdrObKaqbUsjq11hnq02c4feYwR3NwHrwCBQQIIa2FNIJyAtvbqEwJfbFtw1Ap/m4hFqHZVC5k8N5PjKnEgAqCgBc03Lu6FcUteAoOBRfoIAd4KgEUWAEWPuNv+IdDW/zhLf3ulVLpVoGJDVhBYmBRefO7LRdPeeYfdmwbNySRoALOC5kquTe0PG0LmXbJ52Gi0t67eAk7XdPVODbdn5PCimCl26fRgouzyu0fjLnuJQKXFERQL6HsPa5ejH3H9Iw/XHAAFgInfbofjjrANHPKseH0TRP6ZpuYiEQwUTiAFNYIxir7bo549IiyPKNUq4Y0EUptVNIu+tsYKAuDJRiuCCNlYbSNsUoXo33CSGHbGO74GfpLQl8b5USI4646DQfnZpT9r4t450dEyJwHb7qlnwm+5smWlXzOU5/OGz9wt379P5zmNDANLD/T5wMcEB06j79jyjR3VvVGE1YDiYAggnhIy8q+W2OefFKZO6+UyoKNwERgexBFQlwgFpKYXnT+FkVdWAumgAEvkCmsNJRzc8q+Nvn3fEKMXfCQBfJN0LrilxU378kvOf71SX7i8/9W/xm4CMwA+TMVwAdEv/6Ynv/AHiaHUr2KONwSR0EII0gO5QpcfUfM9Jxy+klHZCFKBBPISAHThelYWQfAECwg4ICmg9lFZaapXP+BhLd+0GLnHDTDpNcCXwO/pGTzntZ0zrFT/i9f/xv6c8B0QO3ZPiKTh3TifzrDsXdu50A5YopIuiSiIIYBySAxyrW3RyTjluNHPUtzGsj3EJR1RAPU9KxiCs0cFleU6XmltNPy5k9JedUNglzyXfIZ0BK0IL/oO+SzS45LZ/2Dd/2Bft9MnYvAJWAe8M9WAAUcQDugffAyD79hSq8tG8YpyAsgIITsM5C6su2A4cCtEVlafKqrLMwrrUzQkIl2IPgeZAWvDFYbMLeozNXAThpe9e6EN30oZrzsoU1eM+kSb3THfHjnyabb5M+5I5/8Z/pth6c5B1wA5oDW8/GcYD8wCWy7fQdbf+LN8iVbd5pXxFMRdtAQ9QvSZ5AUJFYkAvqAEctKXTh6xHP83x3zZzytZYUcbKgGFLyGc0wK6ZBhcq9h78sse/cJifcw6yHcwmsuaB205smLMV+8+xdzzp/xD3zan+t3//NZzgLnCRPf8/mg5DAwAUztH2Ts194jn7p3p3lTPG6xwyaIIJiSQCrhsXigAgwYSA21BszPK0vzsLqgZC0FIK0I/cPCwKAwPAJJpLDqYVG7xH2XOC3FNxRdUfKwzmeXHUdP+7/6yD/Snz46x0Xo4DIw/7w/KRpEGA/VMPA77zNvu/Uq/YTyqC1FoxY7INiqQUoghQgJSAQigAVSgTIQC0QCpme9ybVDkHphAReIF7YVtrV1cKset1QsdY76rGv86zH5uff/rv8zYAGYDuQXnu8nRUOjGdL1gPnNI3o2a3LfgbJOVrxuUQeEpHFr+3JUUB/+1lCoKawqLAesBjSATNAskG5od5JbAbfsu+U+68mnXVHyh7//X/W7vuhv9R5gNpCfARYBfUGfFgf6gdGA4bKl/0fewq2v2SPvGxoze4p5wfYbTEWQsmATIAm7x7AcYqT3nh+8BpGge2pXXCus7zXFrXQFWJjxJ/7+hP7uZ/05/1p3LIdSnw1YBvTF+spMFRgMw2IIGNhWpfrNr+H6W3bIm0eH5SVR1Ughgq2YtSERzhIFjAEAH4ijodRDybua75DPV7zOzulD/3ZW/+Kr/577zq2wAiwBC0GARWDlP+M7Q2mohoEgQn8QJvr869nz9v3m+j3Den21n91J2aQmFQg7SRP1VgD4XNEcCFdYrbpvrixz8sS83PcnT/r7vv8+TgB5ILocyC+Fn5v/mV+aMkA5kA+gAvQBqQXzzgNM3LmDbQdHzY6xim6txIykEdXYkgJkjmYzZ6WWMTdTk/OPz/oz/3iGc3/0BJcc+EBwFagFwgHUAf9f5VtjURCiL6ASfi8BSYAN8D02iIgj2IBWQAOoB/KrAXUg/6/6xckISIFSQBlI1olggu1tDvC95APqQCOgCeT/Xb45KkC8DlGwQQBk3ZbbA1kgma2DvjBJvngtkMYEyAbnDh8QxHjh2/8DIIcJm0A74ugAAAAASUVORK5CYII=&quot; /&gt; .&lt;/p&gt;
&lt;p&gt;Let me know if this worked for you or if you found a better way!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Encoding - Run length encoder]]></title><description><![CDATA[This post is the start of a mini-series on  data compression . Over the course of the series we will look at some algorithms for encoding…]]></description><link>http://iolivia.me/posts/6-run-length-encoder/</link><guid isPermaLink="false">http://iolivia.me/posts/6-run-length-encoder/</guid><pubDate>Mon, 12 Jun 2017 00:18:00 GMT</pubDate><content:encoded>&lt;p&gt;This post is the start of a mini-series on &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_compression&quot;&gt;data compression&lt;/a&gt;. Over the course of the series we will look at some algorithms for encoding, understand their strengths and weaknesses and we&apos;ll wrap up at the end with some wise thoughts after we&apos;ve learnt all of this. &lt;/p&gt;
&lt;p&gt;First, what is data compression and why is it useful? &lt;/p&gt;
&lt;p&gt;Data compression is a way of encoding the raw information in a new format such that the resulting total byte size is smaller. The reason why this is useful is because we live in a world of huge images, videos, documents, etc. Watching a video on my phone requires a different resolution and quality than watching it on my 4K monitor, and encoding is one way to guarantee an experience customized to the device used but also the bandwidth constraints.   &lt;/p&gt;
&lt;p&gt;But you might wonder, how do we compress the data so that we don&apos;t lose any information? Well, sometimes we do sometimes we don&apos;t. The two big types of compression are: &lt;strong&gt;lossy&lt;/strong&gt; and &lt;strong&gt;lossless&lt;/strong&gt;. Generally lossy algorithms have some sort of heuristic which tells them how to discard the least important information. For example, the JPEG format uses a model based on the human visual system to tell it which information is least perceptible by the human eye, and thus can be discarded without any preceived loss of information. Lossless algorithms usually use interesting tricks to manipulate and store the data in a different format which minimizes duplication.&lt;/p&gt;
&lt;p&gt;Now that we understand a bit about data compression, let&apos;s got back to what this post is about, &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot;&gt;run length encoding&lt;/a&gt;. This is one of the most basic compression schemes. In fact, you might have already implemented a run length encoder without knowing it!&lt;/p&gt;
&lt;p&gt;Let&apos;s see how it works.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This is our raw data, uncompressed.&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;aaaaaaabcdefff&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// The RLE is used to compress identical adjacent characters.&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;aaaaaaa&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;a7&quot;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// So then the whole compressed string would look like this.&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;a7b1c1d1e1f3&quot;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what we do is quite neat, instead of repeating ourselves, we just pack the adjacent identical characters. &lt;/p&gt;
&lt;p&gt;The code is pretty straight-forward.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string RunLengthEncoder&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;stringstream stream&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    size_t current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    size_t length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Loop while we have the same character&lt;/span&gt;
        size_t sequenceLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;sequenceLength&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Add to the encoded string&lt;/span&gt;
        stream &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; sequenceLength&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, pop quiz. Is RLE a lossy or lossless algorithm? Only counts if you do it without google.&lt;/p&gt;
&lt;p&gt;Next up, we&apos;ll pick a different encoding algorithm. &lt;/p&gt;</content:encoded></item><item><title><![CDATA[Count min sketch explained]]></title><description><![CDATA[Last time  we looked at Bloom filters, which is one type of probabilistic data structure. In this post we will look at another one -  Count…]]></description><link>http://iolivia.me/posts/5-count-min-sketch/</link><guid isPermaLink="false">http://iolivia.me/posts/5-count-min-sketch/</guid><pubDate>Fri, 02 Jun 2017 17:59:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/posts/4-bloom-filter-part-3/&quot;&gt;Last time&lt;/a&gt; we looked at Bloom filters, which is one type of probabilistic data structure. In this post we will look at another one - &lt;a href=&quot;https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch&quot;&gt;Count Min Sketch&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;In short, a count min sketch is used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consume a stream of events, where each event has an event type&lt;/li&gt;
&lt;li&gt;query for the frequency of a particular event type in a sketch&lt;/li&gt;
&lt;li&gt;query for the frequency of a particular event type in two different sketches (this will give us the inner product of the frequencies of the event in the two sketches)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&apos;s important to note that due to the risk of collisions and the size of the sketch, it can overestimate the true frequency of the events. It is after all a probabilistic data structure, it doesn&apos;t store the raw data, much like the Bloom filter, so this is expected. &lt;/p&gt;
&lt;p&gt;So let&apos;s see how the sketch works. &lt;/p&gt;
&lt;p&gt;We will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a 2D array of &lt;code class=&quot;language-text&quot;&gt;rows&lt;/code&gt; x &lt;code class=&quot;language-text&quot;&gt;rows&lt;/code&gt; (&lt;code class=&quot;language-text&quot;&gt;rows&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;cols&lt;/code&gt; should be chosed based on the estimated number of unique event types inserted into the sketch)&lt;/li&gt;
&lt;li&gt;one hash function per row (the hash functions should be independent)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&apos;ll start off with a blank 2D array. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// rows = 3, cols = 5&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&apos;s insert some events.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// This will insert an event of type &quot;A&quot;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// For each row, we&apos;ll hash the event type with the&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// hashing function for that row to get an index k&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h0(&quot;A&quot;) - 2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h1(&quot;A&quot;) - 4&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h2(&quot;A&quot;) - 0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// And now we index into every row with the computed k&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// and increment by one.&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now an event of a different type.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// h0(&quot;B&quot;) - 1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h1(&quot;B&quot;) - 4&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h2(&quot;B&quot;) - 3&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rememeber we are inserting a stream of events, so we will have many events of the same type. So let&apos;s insert another event of type &quot;A&quot;;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// h0(&quot;A&quot;) - 2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h1(&quot;A&quot;) - 4&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h2(&quot;A&quot;) - 0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Great, now how do we query for the frequency of an event?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;getFrequency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// This is our state&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 0 1 2 0 0&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 0 0 0 0 3&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 2 0 0 1 0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// We&apos;ll hash again, just like when inserting.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h0(&quot;A&quot;) - 2&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h1(&quot;A&quot;) - 4&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// h2(&quot;A&quot;) - 0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Now for every row we&apos;ll get sketch[row, hrow(&quot;A&quot;)]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// sketch[0, 2] - 2 (the frequency on this row is 2)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// sketch[1, 4] - 3 (the frequency on this row is 3)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// sketch[2, 0] - 2 (the frequency on this row is 2)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// And now we take the min of those&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// min(2, 3, 2)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, we&apos;ll implement this. We already have all the building blocks for double hashing from the Bloom filter so the implementation should be pretty straight-forward. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; CountMinSketch&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size_t row &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; row &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; m_rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Hash &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m_hash&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hashIteration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m_cols&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Increment&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m_vector&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; CountMinSketch&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFrequency&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    size_t minFrequency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;numeric_limits&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;size_t&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;size_t row &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; row &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; m_rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// Hash &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; k &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m_hash&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hashIteration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; row&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m_cols&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// Find min &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; currentFrequency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m_vector&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentFrequency &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; minFrequency&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            minFrequency &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currentFrequency&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; minFrequency&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see the full implementation at &lt;a href=&quot;https://github.com/iolivia/bloom-filter/tree/master/BloomFilter/src/Sketch&quot;&gt;Sketch&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Implementing a Bloom filter - Part 3]]></title><description><![CDATA[Last time we looked at how the internals of Bloom filters work. In this post, we'll get our hands dirty and implement it.  We'll set up an…]]></description><link>http://iolivia.me/posts/4-bloom-filter-part-3/</link><guid isPermaLink="false">http://iolivia.me/posts/4-bloom-filter-part-3/</guid><pubDate>Wed, 24 May 2017 19:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Last time we looked at how the internals of Bloom filters work. In this post, we&apos;ll get our hands dirty and implement it. &lt;/p&gt;
&lt;p&gt;We&apos;ll set up an interface with pure virtuals. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;IBloomFilter&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we&apos;ll need to pick something to use as our array of bits. The two obvious choices are &lt;a href=&quot;http://www.cplusplus.com/reference/bitset/bitset/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;std::bitset&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.cplusplus.com/reference/vector/vector-bool/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;std::vector&amp;lt;bool&amp;gt;&lt;/code&gt;&lt;/a&gt;. Since we want the user of the Bloom filter to specify its size at construction time, we will need to go with the vector. &lt;/p&gt;
&lt;p&gt;Here is our class definition. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;BloomFilter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; IBloomFilter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;BloomFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Hash&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; hash&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; size&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Inherited via IBloomFilter&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; override&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; override&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    Hash m_hash&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; m_k&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;vector&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; m_vector&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you might be asking how we will pick &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; hashing functions. What we actually need is &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; functions which will somehow hash the input, give us &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; different indexes into our bit vector and ensure that these results are consistent. &lt;/p&gt;
&lt;p&gt;But, how can we pick &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; different ways of hashing? There are only a fixed number of &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_hash_functions&quot;&gt;hashing algorithms&lt;/a&gt;, and in theory our &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; could be anything. Luckily, there is a way of generating a different hash based on the iteration number, this technique is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Double_hashing&quot;&gt;double hashing&lt;/a&gt;. Let&apos;s see how this works. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;h(input, iteration) = h1(input) + iteration * h2(input)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So all we have to do is pick 2 different hashing functions, and for every iteration compute the final hash using the formula above. &lt;/p&gt;
&lt;p&gt;We will use &lt;a href=&quot;https://github.com/aappleby/smhasher&quot;&gt;Murmur Hash&lt;/a&gt; for generating the two unique hashes.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;array&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Hash&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;array&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;MurmurHash3_x86_32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; out&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; out&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we just apply the forumula for every iteration. We also modulo with the size of our filter to make sure the numbers we get are actually in our Bloom filter range.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;vector&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Hash&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; iterations&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; hashesIndexed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;vector&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; hashedInput &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; firstHash &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hashedInput&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; secondHash &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; hashedInput&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; iterations&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; hashedInputInt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstHash &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; secondHash &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; max&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        hashesIndexed&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hashedInputInt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; hashesIndexed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have all the moving parts, we can easily implement &lt;code class=&quot;language-text&quot;&gt;put&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;isMaybePresent&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; BloomFilter&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Hash and get k indexes&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; indexes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m_hash&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m_k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m_vector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Set all those bits to 1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; indexes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        m_vector&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; BloomFilter&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;std&lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;string input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Hash and get k indexes&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; indexes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; m_hash&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m_k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; m_vector&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token comment&quot;&gt;// Find if all bits are set&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; indexes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;m_vector&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is pretty much it. You can see the full code at &lt;a href=&quot;https://github.com/iolivia/bloom-filter&quot;&gt;iolivia/bloom-filter&lt;/a&gt;. Next up we&apos;ll do some experiments with &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; and see what our error rates are.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Implementing a Bloom filter - Part 2]]></title><description><![CDATA[Last time  we talked about what a Bloom filter is and why you might use it. In this post we will cover how Bloom filters work internally and…]]></description><link>http://iolivia.me/posts/3-bloom-filter-part-2/</link><guid isPermaLink="false">http://iolivia.me/posts/3-bloom-filter-part-2/</guid><pubDate>Tue, 23 May 2017 20:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/posts/2-bloom-filter-part-1/&quot;&gt;Last time&lt;/a&gt; we talked about what a Bloom filter is and why you might use it. In this post we will cover how Bloom filters work internally and how they achieve constant time lookups. &lt;/p&gt;
&lt;p&gt;We start off with an array of bits of a fixed size &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; (where &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; is dependent on the number of inserts we plan to make) which we initialize to zeroes. We will also need a list of &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; hashing functions. Each hashing function needs to map to an index into our array, so &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt; -&gt; &lt;code class=&quot;language-text&quot;&gt;n-1&lt;/code&gt;. It&apos;s important we pick uniformly distributed and different hashing functions, and we&apos;ll see in a minute why. &lt;/p&gt;
&lt;p&gt;For this example we&apos;ll take &lt;code class=&quot;language-text&quot;&gt;n = 10&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;k = 3&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Start off with our array of zeroes&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, let&apos;s see what putting an element does internally.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;// We take &quot;A&quot; and apply all k hashing functions to it&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Now we set all those bits to 1&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Note that we read the bits from the left, since we are &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// talking about an array of single bits, not bits in a byte.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&apos;s do some queries.&lt;/p&gt;
&lt;p&gt;First let&apos;s query for an element which is there. We expect true here.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;// We take &quot;A&quot; and apply all k hashing functions to it (again)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Now we check those bits in our array.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// If we have at least one bit which is not set (0), we return false.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// If all bits are set (1), we return true.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// In this case, the bits are set, so we return true.&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&apos;s query for an element which we know is not there. We expect false here &lt;em&gt;most of the time&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;// We take &quot;D&quot; and apply all k hashing functions to it&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// In this case&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 4 is not set&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 7 is not set&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 0 is set (it was set by putting &quot;A&quot; in)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// So we have at least one bit which is not set, so we return false.&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK this makes sense but why can&apos;t we say for sure the element is there? When could we query for &lt;code class=&quot;language-text&quot;&gt;&amp;quot;D&amp;quot;&lt;/code&gt; without ever inserting it into the Bloom filter and get true? Let&apos;s put another element in.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;// We take &quot;B&quot; and apply all k hashing functions to it&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Now we set all those bits to 1&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&apos;s query for &lt;code class=&quot;language-text&quot;&gt;&amp;quot;D&amp;quot;&lt;/code&gt; again. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;// We take &quot;D&quot; and apply all k hashing functions to it&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;k3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// In this case&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 4 is set (it was set by putting &quot;B&quot; in)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 7 is set (it was set by putting &quot;B&quot; in)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 0 is set (it was set by putting &quot;A&quot; in)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// All the bits are now set, so we return true.&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the bits corresponding to hashing &lt;code class=&quot;language-text&quot;&gt;&amp;quot;D&amp;quot;&lt;/code&gt; were actually set by putting &lt;code class=&quot;language-text&quot;&gt;&amp;quot;A&amp;quot;&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;&amp;quot;B&amp;quot;&lt;/code&gt; in. This is why we got the false positive. &lt;/p&gt;
&lt;p&gt;This example was deliberately constructed to produce this result, but in reality for a large bloom filter with more hashing functions, the probability of this hapenning is much lower (although it does happen). Tweaking &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;k&lt;/code&gt; will produce different false positive rates.&lt;/p&gt;
&lt;p&gt;So let&apos;s recap what the logic of the Bloom filter is.&lt;/p&gt;
&lt;p&gt;Putting an element into the Bloom filter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apply all k hashing functions to input&lt;/li&gt;
&lt;li&gt;set all bits defined by the hashing to 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Checking whether an element is present in the Bloom filter&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apply all k hashing functions to input&lt;/li&gt;
&lt;li&gt;if all bits defined by the hashing are set (1) we return true, otherwise we return false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;/posts/4-bloom-filter-part-3/&quot;&gt;Next up&lt;/a&gt;, we&apos;ll look at how to implement this.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Implementing a Bloom filter - Part 1]]></title><description><![CDATA[In this series we will implement a very simple Bloom filter in c++.  But first things first. What's a Bloom filter?  Simply put, a Bloom…]]></description><link>http://iolivia.me/posts/2-bloom-filter-part-1/</link><guid isPermaLink="false">http://iolivia.me/posts/2-bloom-filter-part-1/</guid><pubDate>Mon, 22 May 2017 19:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In this series we will implement a very simple Bloom filter in c++. &lt;/p&gt;
&lt;p&gt;But first things first. What&apos;s a Bloom filter? &lt;/p&gt;
&lt;p&gt;Simply put, a Bloom filter is a data structure used for doing lookups of items in sets. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the result of the lookup is &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;, the item is definitely not in the set&lt;/li&gt;
&lt;li&gt;If the result of the lookup is &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;, the item &lt;em&gt;might&lt;/em&gt; be in the set&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the Bloom filter doesn&apos;t store the raw data so it&apos;s not a replacement for storage. The advantage it offers is a constant time lookup optimized for when items are not present in the set.&lt;/p&gt;
&lt;p&gt;Let&apos;s take a an example. We&apos;ll start by putting some items into the Bloom filter.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&apos;s ask the filter if these items are present&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; 
&lt;span class=&quot;token comment&quot;&gt;// the item is definitely not in the set, and we know this is correct&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// the item *might* be present, and we know it is, since we&apos;ve inserted it&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;isMaybePresent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// the item *might* be present, and we know it&apos;s not, since we never inserted it&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// but it doesn&apos;t matter, because we mostly care about when the answer is false&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// and we can afford a few false positives&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And at this point you might be asking yourself, why would anyone use a Bloom filter when it doesn&apos;t actually store any data, and it can only tell you if something is not present or maybe present?&lt;/p&gt;
&lt;p&gt;Imagine you are building Medium&apos;s recommended articles feature. Your recommendation engine gives you a list of articles which the user might enjoy based on their interests. But the recommendation engine has no state, so in this list you could have articles that the user has already read. In order to filter this list out you could of course make database queries for every article to see if they have been read, but that will be expensive. There must be a better way. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter the Bloom filter!&lt;/strong&gt;   &lt;/p&gt;
&lt;p&gt;What if we kept a Bloom filter for every user with the articles they&apos;ve read? Querying the Bloom filter is a constant time operation, and we wouldn&apos;t need to call the database at all. All we have to do is keep the Bloom filter up to date, so every time a user reads something we insert it into the Bloom filter.&lt;/p&gt;
&lt;p&gt;Fun fact, this is actually &lt;a href=&quot;https://blog.medium.com/what-are-bloom-filters-1ec2a50c68ff#.xlkqtn1vy&quot;&gt;what Medium does&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Bloom filters are widely used for this type of quick filtering when the answer is mostly no. They are also used in &lt;a href=&quot;http://archive.is/P6NSg&quot;&gt;Chrome&lt;/a&gt;, &lt;a href=&quot;https://www.akamai.com/jp/ja/multimedia/documents/technical-publication/algorithmic-nuggets-in-content-delivery-technical-publication.pdf&quot;&gt;Akamai&lt;/a&gt; and &lt;a href=&quot;http://www.newsbtc.com/2016/05/10/developers-introduce-bloom-filters-improve-bitcoin-wallet-security/&quot;&gt;Bitcoin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now that we&apos;ve seen what Bloom filters can do and why they are useful, we&apos;ll look at how they do this in &lt;a href=&quot;/posts/3-bloom-filter-part-2/&quot;&gt;part 2&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello world]]></title><description><![CDATA[Hello world, this is the first post! And now some fake JavaScript.  What is Lorem Ipsum? Lorem Ipsum is simply dummy text of the printing…]]></description><link>http://iolivia.me/posts/1-hello-world/</link><guid isPermaLink="false">http://iolivia.me/posts/1-hello-world/</guid><pubDate>Sat, 11 Mar 2017 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hello world, this is the first post!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    resolve&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; `gatsby-source-filesystem`&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    options&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; `$&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/src/pages`&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pages&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now some fake JavaScript. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// do something interesting&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;What is Lorem Ipsum?&lt;/h2&gt;
&lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
&lt;h2&gt;Why do we use it?&lt;/h2&gt;
&lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using &apos;Content here, content here&apos;, making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for &apos;lorem ipsum&apos; will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
&lt;h3&gt;Where does it come from?&lt;/h3&gt;
&lt;p&gt;Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of &quot;de Finibus Bonorum et Malorum&quot; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, &quot;Lorem ipsum dolor sit amet..&quot;, comes from a line in section 1.10.32.&lt;/p&gt;
&lt;p&gt;The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from &quot;de Finibus Bonorum et Malorum&quot; by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.&lt;/p&gt;</content:encoded></item></channel></rss>